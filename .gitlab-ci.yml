# GitLab CI/CD Pipeline for Product Catalog Service
stages:
  - test
  - build
  - deploy

variables:
  # Maven configuration
  MAVEN_OPTS: "-Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository"
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version"

  # Docker configuration
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"

  # AWS configuration
  AWS_DEFAULT_REGION: eu-central-1

  # Container tool (can be docker or podman)
  CONTAINER_TOOL: docker

# Cache Maven dependencies
cache:
  paths:
    - .m2/repository/

# Test stage: Run unit and integration tests
test:
  stage: test
  image: eclipse-temurin:21-jdk
  before_script:
    - chmod +x mvnw
  script:
    - ./mvnw $MAVEN_CLI_OPTS clean compile
    - ./mvnw $MAVEN_CLI_OPTS test
  artifacts:
    when: always
    reports:
      junit:
        - target/surefire-reports/TEST-*.xml
    paths:
      - target/
    expire_in: 1 week
  coverage: '/Total.*?([0-9]{1,3})%/'

# Build stage: Create and push Docker image
build:
  stage: build
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  before_script:
    # Install AWS CLI
    - apk add --no-cache python3 py3-pip
    - pip3 install --upgrade pip
    - pip3 install awscli

    # Login to ECR
    - aws ecr get-login-password --region $AWS_DEFAULT_REGION |
      docker login --username AWS --password-stdin $ECR_REGISTRY
  script:
    # Build Docker image
    - docker build -t $ECR_REGISTRY/product-catalog-service:$CI_COMMIT_SHA .
    - docker tag $ECR_REGISTRY/product-catalog-service:$CI_COMMIT_SHA
      $ECR_REGISTRY/product-catalog-service:latest

    # Push to ECR
    - docker push $ECR_REGISTRY/product-catalog-service:$CI_COMMIT_SHA
    - docker push $ECR_REGISTRY/product-catalog-service:latest

    # Save image digest for deployment
    - docker inspect --format='{{index .RepoDigests 0}}'
      $ECR_REGISTRY/product-catalog-service:$CI_COMMIT_SHA > image-digest.txt
  artifacts:
    paths:
      - image-digest.txt
    expire_in: 1 week
  only:
    - main
    - develop

# Deploy stage: Deploy to AWS ECS
deploy:
  stage: deploy
  image: amazon/aws-cli:latest
  before_script:
    - yum install -y jq
  script:
    # Create ECS task definition
    - |
      cat > task-definition.json << EOF
      {
        "family": "product-catalog-service",
        "taskRoleArn": "arn:aws:iam::$AWS_ACCOUNT_ID:role/ecsTaskRole",
        "executionRoleArn": "arn:aws:iam::$AWS_ACCOUNT_ID:role/ecsTaskExecutionRole",
        "networkMode": "awsvpc",
        "requiresCompatibilities": ["FARGATE"],
        "cpu": "256",
        "memory": "512",
        "containerDefinitions": [
          {
            "name": "product-catalog",
            "image": "$ECR_REGISTRY/product-catalog-service:$CI_COMMIT_SHA",
            "portMappings": [
              {
                "containerPort": 8080,
                "protocol": "tcp"
              }
            ],
            "essential": true,
            "logConfiguration": {
              "logDriver": "awslogs",
              "options": {
                "awslogs-group": "/ecs/product-catalog-service",
                "awslogs-region": "$AWS_DEFAULT_REGION",
                "awslogs-stream-prefix": "ecs"
              }
            },
            "environment": [
              {"name": "DB_HOST", "value": "$DB_HOST"},
              {"name": "DB_PORT", "value": "5432"},
              {"name": "DB_NAME", "value": "productcatalog"},
              {"name": "DB_USERNAME", "value": "$DB_USERNAME"},
              {"name": "DB_PASSWORD", "value": "$DB_PASSWORD"}
            ],
            "healthCheck": {
              "command": [
                "CMD-SHELL",
                "curl -f http://localhost:8080/actuator/health || exit 1"
              ],
              "interval": 30,
              "timeout": 5,
              "retries": 3,
              "startPeriod": 60
            }
          }
        ]
      }
      EOF

    # Register task definition
    - aws ecs register-task-definition
      --cli-input-json file://task-definition.json

    # Update ECS service
    - aws ecs update-service
      --cluster $ECS_CLUSTER_NAME
      --service product-catalog-service
      --task-definition product-catalog-service

    # Wait for deployment to complete
    - aws ecs wait services-stable
      --cluster $ECS_CLUSTER_NAME
      --services product-catalog-service
  environment:
    name: production
    url: http://$ALB_DNS_NAME
  only:
    - main
  when: manual  # Require manual approval for production deployment

# Test deployment stage
test_deployment:
  stage: deploy
  image: curlimages/curl:latest
  script:
    - echo "Testing deployment health..."
    - curl -f http://$ALB_DNS_NAME/actuator/health
    - echo "Testing API endpoints..."
    - curl -f http://$ALB_DNS_NAME/api/products
  dependencies:
    - deploy
  only:
    - main
